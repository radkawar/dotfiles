local wezterm = require("wezterm")
local mux = wezterm.mux
local act = wezterm.action
local config = {}


local session_manager = require("wezterm-session-manager/session-manager")

-- Performance Settings
config.enable_wayland = true
config.enable_kitty_graphics = true
config.max_fps = 120
config.front_end = "WebGpu" -- Better performance and rendering
config.webgpu_power_preference = "HighPerformance"

-- General Appearance Settings
config.color_scheme = "Tokyo Night Storm"

config.window_decorations = "RESIZE"
config.enable_scroll_bar = true

-- Font and Text Settings
config.font = wezterm.font("JetBrainsMono Nerd Font")
config.font_size = 13.0
config.line_height = 1.2

wezterm.on('gui-startup', function(cmd)
  local tab, pane, window = mux.spawn_window(cmd or {})
  window:gui_window():maximize()
end)

-- Cursor Settings
config.default_cursor_style = "BlinkingBlock"
config.cursor_blink_ease_in = "Constant"
config.cursor_blink_ease_out = "Constant"
config.cursor_blink_rate = 400
config.colors = {
  cursor_bg = "#bb9af7",  -- Purple cursor
  cursor_fg = "#1a1b26",
  cursor_border = "#bb9af7",
}

-- Window and Padding Settings
config.window_padding = {
  left = 4,
  right = 4,
  top = 2,
  bottom = 0,
}

-- Tab Bar Settings
config.use_fancy_tab_bar = false
config.hide_tab_bar_if_only_one_tab = false
config.tab_bar_at_bottom = false
config.tab_max_width = 15  -- Fixed width for tabs


config.command_palette_font_size = 13.0
config.command_palette_fg_color = "#c0caf5"  -- Bright foreground from Tokyo Night Storm
config.command_palette_bg_color = "#1a1b26"  -- Dark background from Tokyo Night Storm
config.command_palette_rows = 10  -- Number of visible rows

wezterm.on('format-tab-title', function(tab, tabs, panes, config, hover, max_width)
  local background = '#1f2335'  -- Default inactive background
  local foreground = '#c0caf5'  -- Brighter foreground for better visibility
  
  if tab.is_active then
    background = '#3b4261'  -- Active tab background
    foreground = '#c0caf5'
  elseif hover then
    background = '#292e42'  -- Hover background
    foreground = '#bb9af7'  -- Purple accent for hover
  end
  
  -- Use custom tab title if set, otherwise "Unnamed"
  local title = tab.tab_title
  if not title or title == "" then
    title = "unnamed"
  end
  
  -- Prepend tab index
  local index_str = tostring(tab.tab_index + 1) .. ": "
  local base_title = title
  title = index_str .. title
  
  -- Set fixed width (15 characters total, excluding outer padding)
  local fixed_width = 15
  local index_length = #index_str
  local available_width = fixed_width - index_length - 2  -- Account for outer padding
  
  -- Truncate or center the title
  if #base_title > available_width then
    base_title = base_title:sub(1, available_width - 3) .. "..."
  end
  
  local total_padding = available_width - #base_title
  local left_padding = math.floor(total_padding / 2)
  local right_padding = total_padding - left_padding
  
  -- Build centered title
  title = index_str .. string.rep(" ", left_padding) .. base_title .. string.rep(" ", right_padding)
  
  -- Add outer padding to match provided config's spacing
  title = " " .. title .. " "
  
  return {
    { Background = { Color = background } },
    { Foreground = { Color = foreground } },
    { Text = title },
    { Attribute = { Intensity = tab.is_active and "Bold" or "Normal" } },
    { Attribute = { Underline = tab.is_active and "Single" or "None" } },
  }
end)

-- Status Bar Settings
wezterm.on("update-status", function(window, pane)
  local date = wezterm.strftime("%a %d-%b %H:%M%p")
  local battery = ""
  for _, b in ipairs(wezterm.battery_info()) do
    battery = string.format("%.0f%%", b.state_of_charge * 100)
  end
  local workspace = window:active_workspace()
  local workspace_display = " [" .. workspace .. "] "

  -- Key table status on left
  local key_table = window:active_key_table()
  local key_table_display = key_table and " " .. key_table .. " " or ""
  window:set_right_status(wezterm.format({
    { Background = { Color = "#3b4261" } },  -- Active tab background
    { Foreground = { Color = "#c0caf5" } },  -- Bright text
    { Text = key_table_display },

    { Background = { Color = "#7aa2f7" } },  -- Blue for workspace
    { Foreground = { Color = "#1a1b26" } },
    { Text = workspace_display },
    { Background = { Color = "#9ece6a" } },  -- Green for battery
    { Foreground = { Color = "#1a1b26" } },
    { Text = " " .. battery .. " " },
    { Background = { Color = "#bb9af7" } },  -- Purple for date
    { Foreground = { Color = "#1a1b26" } },
    { Text = " " .. date .. " " },
  }))
end)

-- Shell Configuration (Platform-Specific)
{{ if eq .chezmoi.os "darwin" }}
config.default_prog = { "/opt/homebrew/bin/fish", "-l" }
{{ else if eq .chezmoi.os "linux" }}
config.default_prog = { "/home/linuxbrew/.linuxbrew/bin/fish", "-l" }
{{ else }}
config.default_prog = { "/usr/bin/fish", "-l" }
{{ end }}

-- Leader Key Configuration
config.leader = { key = "a", mods = "CTRL", timeout_milliseconds = 1000 }


wezterm.on("save_session", function(window) session_manager.save_state(window) end)
wezterm.on("load_session", function(window) session_manager.load_state(window) end)
wezterm.on("restore_session", function(window) session_manager.restore_state(window) end)

local actions = {
  show_workspaces = act.ShowLauncherArgs { flags = "FUZZY|WORKSPACES", title = "Switch Workspace" },
  new_workspace = act.PromptInputLine {
    description = "Enter new workspace name",
    action = wezterm.action_callback(function(window, pane, line)
      if line then
        wezterm.mux.spawn_window({ workspace = line })
      end
    end),
  },
  rename_workspace = act.PromptInputLine {
    description = "Enter new name for current workspace",
    action = wezterm.action_callback(function(window, pane, line)
      if line then
        wezterm.mux.rename_workspace(window:active_workspace(), line)
      end
    end),
  },
  prev_workspace = act.SwitchWorkspaceRelative(-1),
  next_workspace = act.SwitchWorkspaceRelative(1),
}

-- Key Tables
config.key_tables = {
  workspace_mode = {
    -- List workspaces with LEADER w w
    { key = "w", mods = "NONE", action = act.Multiple {
      actions.show_workspaces,
      act.PopKeyTable,
    }},
    -- Create new workspace with LEADER w n
    { key = "n", mods = "NONE", action = act.Multiple {
      actions.new_workspace,
      act.PopKeyTable,
    }},
    -- Rename current workspace with LEADER w r
    { key = "r", mods = "NONE", action = act.Multiple {
      actions.rename_workspace,
      act.PopKeyTable,
    }},
    -- Navigate workspaces with LEADER w { and LEADER w }
    { key = "{", mods = "SHIFT", action = act.Multiple {
      actions.prev_workspace,
      act.PopKeyTable,
    }},
    { key = "}", mods = "SHIFT", action = act.Multiple {
      actions.next_workspace,
      act.PopKeyTable,
    }},
    -- Exit workspace mode with Escape
    { key = "Escape", mods = "NONE", action = act.PopKeyTable },
  },


  session_management = {
    { key = 's', action = act.EmitEvent 'save_session' },
    { key = 'l', action = act.EmitEvent 'load_session' },
    { key = 'r', action = act.EmitEvent 'restore_session' },
    -- Add an escape key to exit the key table
    { key = 'Escape', action = act.PopKeyTable },
  },
}

-- Keybindings
config.keys = {
  -- Session Mode
  {
    key = 'm', mods = 'LEADER', action = act.ActivateKeyTable { 
      name = 'session_management', 
      one_shot = false,
      timeout_milliseconds = 1000,
    },
  },

  -- Workspace Mode
  {
    key = "w", mods = "LEADER", action = act.ActivateKeyTable {
      name = "workspace_mode",
      one_shot = false,
      timeout_milliseconds = 1000,
    }
  },


  -- Tab Management
  { key = "t", mods = "LEADER", action = act.SpawnTab("CurrentPaneDomain") },
  { key = "T", mods = "LEADER", action = act.ShowTabNavigator },
  { key = "[", mods = "LEADER", action = act.ActivateTabRelative(-1) },
  { key = "]", mods = "LEADER", action = act.ActivateTabRelative(1) },

  -- Tab switching by number
  { key = "1", mods = "LEADER", action = act.ActivateTab(0) },
  { key = "2", mods = "LEADER", action = act.ActivateTab(1) },
  { key = "3", mods = "LEADER", action = act.ActivateTab(2) },
  { key = "4", mods = "LEADER", action = act.ActivateTab(3) },
  { key = "5", mods = "LEADER", action = act.ActivateTab(4) },
  { key = "6", mods = "LEADER", action = act.ActivateTab(5) },
  { key = "7", mods = "LEADER", action = act.ActivateTab(6) },
  { key = "8", mods = "LEADER", action = act.ActivateTab(7) },
  { key = "9", mods = "LEADER", action = act.ActivateTab(8) },
  { key = "0", mods = "LEADER", action = act.ActivateTab(-1) }, -- Last tab

  -- Tab Renaming
  { key = "e", mods = "LEADER", action = act.PromptInputLine {
    description = "Enter new tab name",
    action = wezterm.action_callback(function(window, pane, line)
      if line then
        window:active_tab():set_title(line)
      end
    end),
  }},

  -- Pane Navigation
  { key = "h", mods = "LEADER", action = act.ActivatePaneDirection("Left") },
  { key = "j", mods = "LEADER", action = act.ActivatePaneDirection("Down") },
  { key = "k", mods = "LEADER", action = act.ActivatePaneDirection("Up") },
  { key = "l", mods = "LEADER", action = act.ActivatePaneDirection("Right") },

  -- Pane Splitting
  { key = "s", mods = "LEADER", action = act.SplitVertical({ domain = "CurrentPaneDomain" }) },
  { key = "v", mods = "LEADER", action = act.SplitHorizontal({ domain = "CurrentPaneDomain" }) },

  -- Pane Closing
  { key = "q", mods = "LEADER", action = act.CloseCurrentPane({ confirm = true }) },
  { key = "x", mods = "LEADER", action = act.CloseCurrentPane({ confirm = false }) },

  -- Pane Resizing (Arrow Keys)
  { key = "LeftArrow", mods = "LEADER", action = act.AdjustPaneSize({ "Left", 5 }) },
  { key = "RightArrow", mods = "LEADER", action = act.AdjustPaneSize({ "Right", 5 }) },
  { key = "UpArrow", mods = "LEADER", action = act.AdjustPaneSize({ "Up", 3 }) },
  { key = "DownArrow", mods = "LEADER", action = act.AdjustPaneSize({ "Down", 3 }) },

  -- Pane Resizing (Home Row Keys)
  { key = "H", mods = "LEADER|SHIFT", action = act.AdjustPaneSize({ "Left", 5 }) },
  { key = "L", mods = "LEADER|SHIFT", action = act.AdjustPaneSize({ "Right", 5 }) },
  { key = "K", mods = "LEADER|SHIFT", action = act.AdjustPaneSize({ "Up", 3 }) },
  { key = "J", mods = "LEADER|SHIFT", action = act.AdjustPaneSize({ "Down", 3 }) },

  -- Pane Rotation
  { key = "r", mods = "LEADER", action = act.RotatePanes("Clockwise") },
  { key = "R", mods = "LEADER|SHIFT", action = act.RotatePanes("CounterClockwise") },

  -- Pane Zoom
  { key = "z", mods = "LEADER", action = act.TogglePaneZoomState },

  -- Pane Selection and Movement
  { key = "p", mods = "LEADER", action = act.PaneSelect },
  { key = "X", mods = "LEADER|SHIFT", action = act.PaneSelect({ mode = "SwapWithActive" }) },
  { key = "!", mods = "LEADER|SHIFT", action = act.PaneSelect({ mode = "MoveToNewTab" }) },

  -- Copy Mode and Clipboard
  { key = "Space", mods = "LEADER", action = act.ActivateCopyMode },
  { key = "c", mods = "CTRL|SHIFT", action = act.CopyTo("Clipboard") },
  { key = "p", mods = "CTRL", action = act.PasteFrom("Clipboard") },

  -- Search and Navigation
  { key = "/", mods = "LEADER", action = act.Search({ CaseSensitiveString = "" }) },
  { key = "f", mods = "LEADER", action = act.ShowLauncherArgs { flags = "FUZZY|TABS" } },
  { key = "P", mods = "LEADER|SHIFT", action = act.ActivateCommandPalette },

  -- Send Leader Key
  { key = "a", mods = "LEADER|CTRL", action = act.SendKey({ key = "a", mods = "CTRL" }) },

  -- Platform-Specific Keybindings
  {{ if eq .chezmoi.os "darwin" }}
  { key = "3", mods = "ALT", action = wezterm.action.SendString("#") },
  { key = "m", mods = "ALT", action = wezterm.action.SendString("µ") },
  { key = "o", mods = "ALT", action = wezterm.action.SendString("ø") },
  { key = "l", mods = "ALT", action = wezterm.action.SendString("λ") },
  {{ end }}
}

-- Mouse Bindings
config.mouse_bindings = {
  {
    event = { Down = { streak = 1, button = "Right" } },
    mods = "NONE",
    action = act.PaneSelect,
  },
}

return config
